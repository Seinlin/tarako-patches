From f974efac4b99bd21f1aa1fd71ad937ca4aa19d0e Mon Sep 17 00:00:00 2001
From: Kaizhen <kli@mozilla.com>
Date: Sun, 12 Jan 2014 12:33:29 +0800
Subject: [PATCH 05/11] Bug 903149 - Minify the chrome js code.

---
 build/virtualenv_packages.txt                      |    1 +
 python/jsmin/jsmin/__init__.py                     |  195 +++++++++++++++
 python/jsmin/jsmin/test.py                         |  252 ++++++++++++++++++++
 python/jsmin/setup.cfg                             |    5 +
 python/jsmin/setup.py                              |   35 +++
 python/mozbuild/mozpack/files.py                   |   85 ++++++-
 .../mozpack/test/support/minify_js_verify.py       |   11 +
 python/mozbuild/mozpack/test/test_files.py         |   45 ++++
 toolkit/mozapps/installer/js-compare-ast.js        |   28 +++
 toolkit/mozapps/installer/packager.mk              |   13 +
 toolkit/mozapps/installer/packager.py              |   23 +-
 11 files changed, 682 insertions(+), 11 deletions(-)
 create mode 100644 python/jsmin/jsmin/__init__.py
 create mode 100644 python/jsmin/jsmin/test.py
 create mode 100644 python/jsmin/setup.cfg
 create mode 100644 python/jsmin/setup.py
 create mode 100644 python/mozbuild/mozpack/test/support/minify_js_verify.py
 create mode 100644 toolkit/mozapps/installer/js-compare-ast.js

diff --git a/build/virtualenv_packages.txt b/build/virtualenv_packages.txt
index 98003ce..b5524e7 100644
--- a/build/virtualenv_packages.txt
+++ b/build/virtualenv_packages.txt
@@ -1,6 +1,7 @@
 marionette.pth:testing/marionette/client
 blessings.pth:python/blessings
 configobj.pth:python/configobj
+jsmin.pth:python/jsmin
 mach.pth:python/mach
 mozbuild.pth:python/mozbuild
 pymake.pth:build/pymake
diff --git a/python/jsmin/jsmin/__init__.py b/python/jsmin/jsmin/__init__.py
new file mode 100644
index 0000000..e7cdce6
--- /dev/null
+++ b/python/jsmin/jsmin/__init__.py
@@ -0,0 +1,195 @@
+# This code is original from jsmin by Douglas Crockford, it was translated to
+# Python by Baruch Even. It was rewritten by Dave St.Germain for speed.
+#
+# The MIT License (MIT)
+# 
+# Copyright (c) 2013 Dave St.Germain
+# 
+# Permission is hereby granted, free of charge, to any person obtaining a copy
+# of this software and associated documentation files (the "Software"), to deal
+# in the Software without restriction, including without limitation the rights
+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+# copies of the Software, and to permit persons to whom the Software is
+# furnished to do so, subject to the following conditions:
+# 
+# The above copyright notice and this permission notice shall be included in
+# all copies or substantial portions of the Software.
+# 
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+# THE SOFTWARE.
+
+
+import sys
+is_3 = sys.version_info >= (3, 0)
+if is_3:
+    import io
+else:
+    import StringIO
+    try:
+        import cStringIO
+    except ImportError:
+        cStringIO = None
+
+
+__all__ = ['jsmin', 'JavascriptMinify']
+__version__ = '2.0.3'
+
+
+def jsmin(js):
+    """
+    returns a minified version of the javascript string
+    """
+    if not is_3:        
+        if cStringIO and not isinstance(js, unicode):
+            # strings can use cStringIO for a 3x performance
+            # improvement, but unicode (in python2) cannot
+            klass = cStringIO.StringIO
+        else:
+            klass = StringIO.StringIO
+    else:
+        klass = io.StringIO
+    ins = klass(js)
+    outs = klass()
+    JavascriptMinify(ins, outs).minify()
+    return outs.getvalue()
+
+
+class JavascriptMinify(object):
+    """
+    Minify an input stream of javascript, writing
+    to an output stream
+    """
+
+    def __init__(self, instream=None, outstream=None):
+        self.ins = instream
+        self.outs = outstream
+
+    def minify(self, instream=None, outstream=None):
+        if instream and outstream:
+            self.ins, self.outs = instream, outstream
+        write = self.outs.write
+        read = self.ins.read
+
+        space_strings = "abcdefghijklmnopqrstuvwxyz"\
+        "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_$\\"
+        starters, enders = '{[(+-', '}])+-"\''
+        newlinestart_strings = starters + space_strings
+        newlineend_strings = enders + space_strings
+        do_newline = False
+        do_space = False
+        doing_single_comment = False
+        previous_before_comment = ''
+        doing_multi_comment = False
+        in_re = False
+        in_quote = ''
+        quote_buf = []
+
+        previous = read(1)
+        next1 = read(1)
+        if previous == '/':
+            if next1 == '/':
+                doing_single_comment = True
+            elif next1 == '*':
+                doing_multi_comment = True
+            else:
+                write(previous)
+        elif not previous:
+            return
+        elif previous >= '!':
+            if previous in "'\"":
+                in_quote = previous
+            write(previous)
+            previous_non_space = previous
+        else:
+            previous_non_space = ' '
+        if not next1:
+            return
+
+        while 1:
+            next2 = read(1)  
+            if not next2:
+                last = next1.strip()
+                if not (doing_single_comment or doing_multi_comment)\
+                    and last not in ('', '/'):
+                    write(last)
+                break
+            if doing_multi_comment:
+                if next1 == '*' and next2 == '/':
+                    doing_multi_comment = False
+                    next2 = read(1)
+            elif doing_single_comment:
+                if next1 in '\r\n':
+                    doing_single_comment = False
+                    while next2 in '\r\n':
+                        next2 = read(1)
+                        if not next2:
+                            break
+                    if previous_before_comment in ')}]':
+                        do_newline = True
+                    elif previous_before_comment in space_strings:
+                        write('\n')
+            elif in_quote:
+                quote_buf.append(next1)
+
+                if next1 == in_quote:
+                    numslashes = 0
+                    for c in reversed(quote_buf[:-1]):
+                        if c != '\\':
+                            break
+                        else:
+                            numslashes += 1
+                    if numslashes % 2 == 0:
+                        in_quote = ''
+                        write(''.join(quote_buf))
+            elif next1 in '\r\n':
+                if previous_non_space in newlineend_strings \
+                    or previous_non_space > '~':
+                    while 1:
+                        if next2 < '!':
+                            next2 = read(1)
+                            if not next2:
+                                break
+                        else:
+                            if next2 in newlinestart_strings \
+                                or next2 > '~' or next2 == '/':
+                                do_newline = True
+                            break
+            elif next1 < '!' and not in_re:
+                if (previous_non_space in space_strings \
+                    or previous_non_space > '~') \
+                    and (next2 in space_strings or next2 > '~'):
+                    do_space = True
+            elif next1 == '/':
+                if in_re:
+                    if previous != '\\':
+                        in_re = False
+                    write('/')
+                elif next2 == '/':
+                    doing_single_comment = True
+                    previous_before_comment = previous_non_space
+                elif next2 == '*':
+                    doing_multi_comment = True
+                else:
+                    in_re = previous_non_space in '(,=:[?!&|'
+                    write('/')
+            else:
+                if do_space:
+                    do_space = False
+                    write(' ')
+                if do_newline:
+                    write('\n')
+                    do_newline = False
+                write(next1)
+                if not in_re and next1 in "'\"":
+                    in_quote = next1
+                    quote_buf = []
+            previous = next1
+            next1 = next2
+
+            if previous >= '!':
+                previous_non_space = previous
diff --git a/python/jsmin/jsmin/test.py b/python/jsmin/jsmin/test.py
new file mode 100644
index 0000000..19dd01a
--- /dev/null
+++ b/python/jsmin/jsmin/test.py
@@ -0,0 +1,252 @@
+import unittest
+import jsmin
+import sys
+
+class JsTests(unittest.TestCase):
+    def _minify(self, js):
+        return jsmin.jsmin(js)
+
+    def assertEqual(self, thing1, thing2):
+        if thing1 != thing2:
+            print(repr(thing1), repr(thing2))
+            raise AssertionError
+        return True
+    
+    def assertMinified(self, js_input, expected):
+        minified = jsmin.jsmin(js_input)
+        assert minified == expected, "%r != %r" % (minified, expected)
+        
+    def testQuoted(self):
+        js = r'''
+        Object.extend(String, {
+          interpret: function(value) {
+            return value == null ? '' : String(value);
+          },
+          specialChar: {
+            '\b': '\\b',
+            '\t': '\\t',
+            '\n': '\\n',
+            '\f': '\\f',
+            '\r': '\\r',
+            '\\': '\\\\'
+          }
+        });
+
+        '''
+        expected = r"""Object.extend(String,{interpret:function(value){return value==null?'':String(value);},specialChar:{'\b':'\\b','\t':'\\t','\n':'\\n','\f':'\\f','\r':'\\r','\\':'\\\\'}});"""
+        self.assertMinified(js, expected)
+
+    def testSingleComment(self):
+        js = r'''// use native browser JS 1.6 implementation if available
+        if (Object.isFunction(Array.prototype.forEach))
+          Array.prototype._each = Array.prototype.forEach;
+
+        if (!Array.prototype.indexOf) Array.prototype.indexOf = function(item, i) {
+
+        // hey there
+        function() {// testing comment
+        foo;
+        //something something
+
+        location = 'http://foo.com;';   // goodbye
+        }
+        //bye
+        '''
+        expected = r""" 
+if(Object.isFunction(Array.prototype.forEach))
+Array.prototype._each=Array.prototype.forEach;if(!Array.prototype.indexOf)Array.prototype.indexOf=function(item,i){ function(){ foo; location='http://foo.com;';}"""
+        # print expected
+        self.assertMinified(js, expected)
+    
+    def testEmpty(self):
+        self.assertMinified('', '')
+        self.assertMinified(' ', '')
+        self.assertMinified('\n', '')
+        self.assertMinified('\r\n', '')
+        self.assertMinified('\t', '')
+        
+        
+    def testMultiComment(self):
+        js = r"""
+        function foo() {
+            print('hey');
+        }
+        /*
+        if(this.options.zindex) {
+          this.originalZ = parseInt(Element.getStyle(this.element,'z-index') || 0);
+          this.element.style.zIndex = this.options.zindex;
+        }
+        */
+        another thing;
+        """
+        expected = r"""function foo(){print('hey');}
+another thing;"""
+        self.assertMinified(js, expected)
+    
+    def testLeadingComment(self):
+        js = r"""/* here is a comment at the top
+        
+        it ends here */
+        function foo() {
+            alert('crud');
+        }
+        
+        """
+        expected = r"""function foo(){alert('crud');}"""
+        self.assertMinified(js, expected)
+        
+    def testJustAComment(self):
+        self.assertMinified('     // a comment', '')
+        
+    def testRe(self):
+        js = r'''  
+        var str = this.replace(/\\./g, '@').replace(/"[^"\\\n\r]*"/g, '');
+        return (/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(str);
+        });'''
+        expected = r"""var str=this.replace(/\\./g,'@').replace(/"[^"\\\n\r]*"/g,'');return(/^[,:{}\[\]0-9.\-+Eaeflnr-u \n\r\t]*$/).test(str);});"""
+        self.assertMinified(js, expected)
+
+    def testIgnoreComment(self):
+        js = r"""
+        var options_for_droppable = {
+          overlap:     options.overlap,
+          containment: options.containment,
+          tree:        options.tree,
+          hoverclass:  options.hoverclass,
+          onHover:     Sortable.onHover
+        }
+
+        var options_for_tree = {
+          onHover:      Sortable.onEmptyHover,
+          overlap:      options.overlap,
+          containment:  options.containment,
+          hoverclass:   options.hoverclass
+        }
+
+        // fix for gecko engine
+        Element.cleanWhitespace(element); 
+        """
+        expected = r"""var options_for_droppable={overlap:options.overlap,containment:options.containment,tree:options.tree,hoverclass:options.hoverclass,onHover:Sortable.onHover}
+var options_for_tree={onHover:Sortable.onEmptyHover,overlap:options.overlap,containment:options.containment,hoverclass:options.hoverclass} 
+Element.cleanWhitespace(element);"""
+        self.assertMinified(js, expected)
+
+    def testHairyRe(self):
+        js = r"""
+        inspect: function(useDoubleQuotes) {
+          var escapedString = this.gsub(/[\x00-\x1f\\]/, function(match) {
+            var character = String.specialChar[match[0]];
+            return character ? character : '\\u00' + match[0].charCodeAt().toPaddedString(2, 16);
+          });
+          if (useDoubleQuotes) return '"' + escapedString.replace(/"/g, '\\"') + '"';
+          return "'" + escapedString.replace(/'/g, '\\\'') + "'";
+        },
+
+        toJSON: function() {
+          return this.inspect(true);
+        },
+
+        unfilterJSON: function(filter) {
+          return this.sub(filter || Prototype.JSONFilter, '#{1}');
+        },
+        """
+        expected = r"""inspect:function(useDoubleQuotes){var escapedString=this.gsub(/[\x00-\x1f\\]/,function(match){var character=String.specialChar[match[0]];return character?character:'\\u00'+match[0].charCodeAt().toPaddedString(2,16);});if(useDoubleQuotes)return'"'+escapedString.replace(/"/g,'\\"')+'"';return"'"+escapedString.replace(/'/g,'\\\'')+"'";},toJSON:function(){return this.inspect(true);},unfilterJSON:function(filter){return this.sub(filter||Prototype.JSONFilter,'#{1}');},"""
+        self.assertMinified(js, expected)
+
+    def testNoBracesWithComment(self):
+        js = r"""
+        onSuccess: function(transport) {
+            var js = transport.responseText.strip();
+            if (!/^\[.*\]$/.test(js)) // TODO: improve sanity check
+              throw 'Server returned an invalid collection representation.';
+            this._collection = eval(js);
+            this.checkForExternalText();
+          }.bind(this),
+          onFailure: this.onFailure
+        });
+        """
+        expected = r"""onSuccess:function(transport){var js=transport.responseText.strip();if(!/^\[.*\]$/.test(js)) 
+throw'Server returned an invalid collection representation.';this._collection=eval(js);this.checkForExternalText();}.bind(this),onFailure:this.onFailure});"""
+        self.assertMinified(js, expected)
+    
+    def testSpaceInRe(self):
+        js = r"""
+        num = num.replace(/ /g,'');
+        """
+        self.assertMinified(js, "num=num.replace(/ /g,'');")
+    
+    def testEmptyString(self):
+        js = r'''
+        function foo('') {
+        
+        }
+        '''
+        self.assertMinified(js, "function foo(''){}")
+    
+    def testDoubleSpace(self):
+        js = r'''
+var  foo    =  "hey";
+        '''
+        self.assertMinified(js, 'var foo="hey";')
+    
+    def testLeadingRegex(self):
+        js = r'/[d]+/g    '
+        self.assertMinified(js, js.strip())
+    
+    def testLeadingString(self):
+        js = r"'a string in the middle of nowhere'; // and a comment"
+        self.assertMinified(js, "'a string in the middle of nowhere';")
+    
+    def testSingleCommentEnd(self):
+        js = r'// a comment\n'
+        self.assertMinified(js, '')
+    
+    def testInputStream(self):
+        try:
+            from StringIO import StringIO
+        except ImportError:
+            from io import StringIO
+            
+        ins = StringIO(r'''
+            function foo('') {
+
+            }
+            ''')
+        outs = StringIO()
+        m = jsmin.JavascriptMinify()
+        m.minify(ins, outs)
+        output = outs.getvalue()
+        assert output == "function foo(''){}"
+    
+    def testUnicode(self):
+        instr = u'\u4000 //foo'
+        expected = u'\u4000'
+        output = jsmin.jsmin(instr)
+        self.assertEqual(output, expected)
+
+    def testCommentBeforeEOF(self):
+        self.assertMinified("//test\r\n", "")
+    
+    def testCommentInObj(self):
+        self.assertMinified("""{ 
+            a: 1,//comment
+            }""", "{a:1,}")
+
+    def testCommentInObj2(self):
+        self.assertMinified("{a: 1//comment\r\n}", "{a:1\n}")
+
+    def testImplicitSemicolon(self):
+        # return \n 1  is equivalent with   return; 1
+        # so best make sure jsmin retains the newline
+        self.assertMinified("return;//comment\r\na", "return;a")
+
+    def testImplicitSemicolon2(self):
+        self.assertMinified("return//comment...\r\na", "return\na")
+    
+    def testSingleComment2(self):
+        self.assertMinified('x.replace(/\//, "_")// slash to underscore',
+                'x.replace(/\//,"_")')
+
+
+if __name__ == '__main__':
+    unittest.main()
diff --git a/python/jsmin/setup.cfg b/python/jsmin/setup.cfg
new file mode 100644
index 0000000..861a9f5
--- /dev/null
+++ b/python/jsmin/setup.cfg
@@ -0,0 +1,5 @@
+[egg_info]
+tag_build = 
+tag_date = 0
+tag_svn_revision = 0
+
diff --git a/python/jsmin/setup.py b/python/jsmin/setup.py
new file mode 100644
index 0000000..3042d9c
--- /dev/null
+++ b/python/jsmin/setup.py
@@ -0,0 +1,35 @@
+from setuptools import setup
+
+import os, sys, re
+
+os.environ['COPYFILE_DISABLE'] = 'true'  # this disables including resource forks in tar files on os x
+
+
+extra = {}
+if sys.version_info >= (3,0):
+    extra['use_2to3'] = True
+
+setup(
+    name="jsmin",
+    version=re.search(r'__version__ = ["\']([^"\']+)', open('jsmin/__init__.py').read()).group(1),
+    packages=['jsmin'],
+    description='JavaScript minifier.',
+    author='Dave St.Germain',
+    author_email='dave@st.germa.in',
+    test_suite='jsmin.test.JsTests',
+    license='MIT License',
+    url='https://bitbucket.org/dcs/jsmin/',
+    classifiers=[
+        'Development Status :: 5 - Production/Stable',
+        'Environment :: Web Environment',
+        'Intended Audience :: Developers',
+        'License :: OSI Approved :: MIT License',
+        'Operating System :: OS Independent',
+        'Programming Language :: Python :: 2',
+        'Programming Language :: Python :: 3',
+        'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
+        'Topic :: Software Development :: Pre-processors',
+        'Topic :: Text Processing :: Filters',
+    ],
+    **extra
+)
diff --git a/python/mozbuild/mozpack/files.py b/python/mozbuild/mozpack/files.py
index 093090f..d074842 100644
--- a/python/mozbuild/mozpack/files.py
+++ b/python/mozbuild/mozpack/files.py
@@ -4,10 +4,15 @@
 
 import errno
 import os
-import re
 import shutil
 import stat
+import subprocess
 import uuid
+
+from tempfile import NamedTemporaryFile
+
+from jsmin import JavascriptMinify
+
 from mozpack.executables import (
     is_executable,
     may_strip,
@@ -463,15 +468,72 @@ class MinifiedProperties(BaseFile):
                                if not l.startswith('#')))
 
 
+class MinifiedJavaScript(BaseFile):
+    '''
+    File class for minifying JavaScript files.
+    '''
+    def __init__(self, file, verify_command=None):
+        assert isinstance(file, BaseFile)
+        self._file = file
+        self._verify_command = verify_command
+
+    def open(self):
+        output = BytesIO()
+        minify = JavascriptMinify(self._file.open(), output)
+        minify.minify()
+        output.seek(0)
+
+        if not self._verify_command:
+            return output
+
+        input_source = self._file.open().read()
+        output_source = output.getvalue()
+
+        with NamedTemporaryFile() as fh1, NamedTemporaryFile() as fh2:
+            fh1.write(input_source)
+            fh2.write(output_source)
+            fh1.flush()
+            fh2.flush()
+
+            try:
+                args = list(self._verify_command)
+                args.extend([fh1.name, fh2.name])
+                subprocess.check_output(args, stderr=subprocess.STDOUT)
+            except subprocess.CalledProcessError as e:
+                errors.warn('JS minification verification failed for %s:\n%s' %
+                    (getattr(self._file, 'path', '<unknown>'), e.output))
+
+                return self._file.open()
+
+        return output
+
+
 class BaseFinder(object):
-    def __init__(self, base, minify=False):
+    def __init__(self, base, minify=False, minify_js=False,
+        minify_js_verify_command=None):
         '''
-        Initializes the instance with a reference base directory. The
-        optional minify argument specifies whether file types supporting
-        minification (currently only "*.properties") should be minified.
+        Initializes the instance with a reference base directory.
+
+        The optional minify argument specifies whether minification of code
+        should occur. minify_js is an additional option to control minification
+        of JavaScript. It requires minify to be True.
+
+        minify_js_verify_command can be used to optionally verify the results
+        of JavaScript minification. If defined, it is expected to be an iterable
+        that will constitute the first arguments to a called process which will
+        receive the filenames of the original and minified JavaScript files.
+        The invoked process can then verify the results. If minification is
+        rejected, the process exits with a non-0 exit code and the original
+        JavaScript source is used. An example value for this argument is
+        ('/path/to/js', '/path/to/verify/script.js').
         '''
+        if minify_js and not minify:
+            raise ValueError('minify_js requires minify.')
+
         self.base = base
         self._minify = minify
+        self._minify_js = minify_js
+        self._minify_js_verify_command = minify_js_verify_command
 
     def find(self, pattern):
         '''
@@ -513,11 +575,16 @@ class BaseFinder(object):
         instance (file), according to the file type (determined by the given
         path), if the FileFinder was created with minification enabled.
         Otherwise, just return the given BaseFile instance.
-        Currently, only "*.properties" files are handled.
         '''
-        if self._minify and not isinstance(file, ExecutableFile):
-            if path.endswith('.properties'):
-                return MinifiedProperties(file)
+        if not self._minify or isinstance(file, ExecutableFile):
+            return file
+
+        if path.endswith('.properties'):
+            return MinifiedProperties(file)
+
+        if self._minify_js and path.endswith(('.js', '.jsm')):
+            return MinifiedJavaScript(file, self._minify_js_verify_command)
+
         return file
 
 
diff --git a/python/mozbuild/mozpack/test/support/minify_js_verify.py b/python/mozbuild/mozpack/test/support/minify_js_verify.py
new file mode 100644
index 0000000..d7fa507
--- /dev/null
+++ b/python/mozbuild/mozpack/test/support/minify_js_verify.py
@@ -0,0 +1,11 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+import sys
+
+
+if len(sys.argv) != 4:
+    raise Exception('Usage: minify_js_verify <exitcode> <orig> <minified>')
+
+sys.exit(int(sys.argv[1]))
diff --git a/python/mozbuild/mozpack/test/test_files.py b/python/mozbuild/mozpack/test/test_files.py
index 291f29a4..7391983 100644
--- a/python/mozbuild/mozpack/test/test_files.py
+++ b/python/mozbuild/mozpack/test/test_files.py
@@ -15,6 +15,7 @@ from mozpack.files import (
     GeneratedFile,
     JarFinder,
     ManifestFile,
+    MinifiedJavaScript,
     MinifiedProperties,
     XPTFile,
 )
@@ -34,6 +35,7 @@ import mozunit
 import os
 import random
 import string
+import sys
 import mozpack.path
 from tempfile import mkdtemp
 from io import BytesIO
@@ -630,6 +632,49 @@ class TestMinifiedProperties(TestWithTmpDir):
                          ['foo = bar\n', '\n'])
 
 
+class TestMinifiedJavaScript(TestWithTmpDir):
+    orig_lines = [
+        '// Comment line',
+        'let foo = "bar";',
+        'var bar = true;',
+        '',
+        '// Another comment',
+    ]
+
+    def test_minified_javascript(self):
+        orig_f = GeneratedFile('\n'.join(self.orig_lines))
+        min_f = MinifiedJavaScript(orig_f)
+
+        mini_lines = min_f.open().readlines()
+        self.assertTrue(mini_lines)
+        self.assertTrue(len(mini_lines) < len(self.orig_lines))
+
+    def _verify_command(self, code):
+        our_dir = os.path.abspath(os.path.dirname(__file__))
+        return [
+            sys.executable,
+            os.path.join(our_dir, 'support', 'minify_js_verify.py'),
+            code,
+        ]
+
+    def test_minified_verify_success(self):
+        orig_f = GeneratedFile('\n'.join(self.orig_lines))
+        min_f = MinifiedJavaScript(orig_f,
+            verify_command=self._verify_command('0'))
+
+        mini_lines = min_f.open().readlines()
+        self.assertTrue(mini_lines)
+        self.assertTrue(len(mini_lines) < len(self.orig_lines))
+
+    def test_minified_verify_failure(self):
+        orig_f = GeneratedFile('\n'.join(self.orig_lines))
+        min_f = MinifiedJavaScript(orig_f,
+            verify_command=self._verify_command('1'))
+
+        mini_lines = min_f.open().readlines()
+        self.assertEqual(mini_lines, orig_f.open().readlines())
+
+
 class MatchTestTemplate(object):
     def prepare_match_test(self, with_dotfiles=False):
         self.add('bar')
diff --git a/toolkit/mozapps/installer/js-compare-ast.js b/toolkit/mozapps/installer/js-compare-ast.js
new file mode 100644
index 0000000..acd35ca
--- /dev/null
+++ b/toolkit/mozapps/installer/js-compare-ast.js
@@ -0,0 +1,28 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * This script compares the AST of two JavaScript files passed as arguments.
+ * The script exits with a 0 status code if both files parse properly and the
+ * ASTs of both files are identical modulo location differences. The script
+ * exits with status code 1 if any of these conditions don't hold.
+ *
+ * This script is used as part of packaging to verify minified JavaScript files
+ * are identical to their original files.
+ */
+
+"use strict";
+
+function ast(filename) {
+  return JSON.stringify(Reflect.parse(snarf(filename), {loc: 0}));
+}
+
+if (scriptArgs.length !== 2) {
+  throw "usage: js js-compare-ast.js FILE1.js FILE2.js";
+}
+
+let ast0 = ast(scriptArgs[0]);
+let ast1 = ast(scriptArgs[1]);
+
+quit(ast0 == ast1 ? 0 : 1);
diff --git a/toolkit/mozapps/installer/packager.mk b/toolkit/mozapps/installer/packager.mk
index 889dd0f..f08b69e 100644
--- a/toolkit/mozapps/installer/packager.mk
+++ b/toolkit/mozapps/installer/packager.mk
@@ -675,6 +675,16 @@ endif
 
 export NO_PKG_FILES USE_ELF_HACK ELF_HACK_FLAGS
 
+# A js binary is needed to perform verification of JavaScript minification.
+# We can only use the built binary when not cross-compiling. Environments
+# (such as release automation) can provide their own js binary to enable
+# verification when cross-compiling.
+ifndef JS_BINARY
+ifndef CROSS_COMPILE
+JS_BINARY = $(DIST)$(_BINPATH)/js
+endif
+endif
+
 # Override the value of OMNIJAR_NAME from config.status with the value
 # set earlier in this file.
 
@@ -686,6 +696,9 @@ stage-package: $(MOZ_PKG_MANIFEST)
 		$(addprefix --removals ,$(MOZ_PKG_REMOVALS)) \
 		$(if $(filter-out 0,$(MOZ_PKG_FATAL_WARNINGS)),,--ignore-errors) \
 		$(if $(MOZ_PACKAGER_MINIFY),--minify) \
+		$(if $(MOZ_PACKAGER_MINIFY_JS),--minify-js \
+		  $(if JS_BINARY,--js-binary $(JS_BINARY)) \
+		) \
 		$(if $(JARLOG_DIR),$(addprefix --jarlog ,$(wildcard $(JARLOG_FILE_AB_CD)))) \
 		$(if $(OPTIMIZEJARS),--optimizejars) \
 		$(addprefix --unify ,$(UNIFY_DIST)) \
diff --git a/toolkit/mozapps/installer/packager.py b/toolkit/mozapps/installer/packager.py
index ffc8eb0..822152d 100644
--- a/toolkit/mozapps/installer/packager.py
+++ b/toolkit/mozapps/installer/packager.py
@@ -238,6 +238,12 @@ def main():
                         help='Transform errors into warnings.')
     parser.add_argument('--minify', action='store_true', default=False,
                         help='Make some files more compact while packaging')
+    parser.add_argument('--minify-js', action='store_true',
+                        help='Minify JavaScript files while packaging.')
+    parser.add_argument('--js-binary',
+                        help='Path to js binary. This is used to verify '
+                        'minified JavaScript. If this is not defined, '
+                        'minification verification will not be performed.')
     parser.add_argument('--jarlog', default='', help='File containing jar ' +
                         'access logs')
     parser.add_argument('--optimizejars', action='store_true', default=False,
@@ -301,12 +307,25 @@ def main():
         launcher.tooldir = buildconfig.substs['LIBXUL_DIST']
 
     with errors.accumulate():
+        verify_command = None
+        if args.js_binary:
+            verify_command = [
+                args.js_binary,
+                os.path.join(os.path.abspath(os.path.dirname(__file__)),
+                    'js-compare-ast.js')
+            ]
+
+        finder_args = dict(
+            minify=args.minify,
+            minify_js=args.minify_js,
+            minify_js_verify_command=verify_command,
+        )
         if args.unify:
             finder = UnifiedBuildFinder(FileFinder(args.source),
                                         FileFinder(args.unify),
-                                        minify=args.minify)
+                                        **finder_args)
         else:
-            finder = FileFinder(args.source, minify=args.minify)
+            finder = FileFinder(args.source, **finder_args)
         if 'NO_PKG_FILES' in os.environ:
             sinkformatter = NoPkgFilesRemover(formatter,
                                               args.manifest is not None)
-- 
1.7.9.5

