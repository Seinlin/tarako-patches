From 54c7fb9d2614dfdf6c82986e49518b2872bdaf49 Mon Sep 17 00:00:00 2001
From: Kai-Zhen Li <kli@mozilla.com>
Date: Thu, 23 Jan 2014 14:05:11 +0800
Subject: [PATCH] nuwa_suppress_gc_cc

---
 dom/base/nsJSEnvironment.cpp  |   21 +++++++++++++++++++--
 dom/base/nsJSEnvironment.h    |    3 +++
 dom/ipc/ContentChild.cpp      |    9 +++++++++
 xpcom/threads/nsTimerImpl.cpp |   10 ++++++++++
 4 files changed, 41 insertions(+), 2 deletions(-)

diff --git a/dom/base/nsJSEnvironment.cpp b/dom/base/nsJSEnvironment.cpp
index 649b990..04dec5b 100644
--- a/dom/base/nsJSEnvironment.cpp
+++ b/dom/base/nsJSEnvironment.cpp
@@ -147,6 +147,9 @@ static nsITimer *sCCTimer;
 static nsITimer *sFullGCTimer;
 static nsITimer *sInterSliceGCTimer;
 
+static bool sGCSuppressed = false;
+static bool sCCSuppressed = false;
+
 static PRTime sLastCCEndTime;
 
 static bool sCCLockedOut;
@@ -2373,7 +2376,7 @@ nsJSContext::LoadEnd()
 void
 nsJSContext::PokeGC(JS::gcreason::Reason aReason, int aDelay)
 {
-  if (sGCTimer || sInterSliceGCTimer || sShuttingDown) {
+  if (sGCTimer || sInterSliceGCTimer || sShuttingDown || sGCSuppressed) {
     // There's already a timer for GC'ing, just return
     return;
   }
@@ -2430,7 +2433,7 @@ nsJSContext::PokeShrinkGCBuffers()
 void
 nsJSContext::MaybePokeCC()
 {
-  if (sCCTimer || sShuttingDown || !sHasRunGC) {
+  if (sCCTimer || sShuttingDown || !sHasRunGC || sCCSuppressed) {
     return;
   }
 
@@ -2502,6 +2505,20 @@ nsJSContext::KillCCTimer()
   }
 }
 
+// static
+void
+nsJSContext::SetGCSuppressed(bool aSuppressed)
+{
+  sGCSuppressed = aSuppressed;
+}
+
+// static
+void
+nsJSContext::SetCCSuppressed(bool aSuppressed)
+{
+  sCCSuppressed = aSuppressed;
+}
+
 void
 nsJSContext::GC(JS::gcreason::Reason aReason)
 {
diff --git a/dom/base/nsJSEnvironment.h b/dom/base/nsJSEnvironment.h
index 40acd28..d6ee82a 100644
--- a/dom/base/nsJSEnvironment.h
+++ b/dom/base/nsJSEnvironment.h
@@ -120,6 +120,9 @@ public:
   static void KillFullGCTimer();
   static void KillInterSliceGCTimer();
 
+	static void SetGCSuppressed(bool sSuppressed);
+	static void SetCCSuppressed(bool sSuppressed);
+
   // Calling LikelyShortLivingObjectCreated() makes a GC more likely.
   static void LikelyShortLivingObjectCreated();
 
diff --git a/dom/ipc/ContentChild.cpp b/dom/ipc/ContentChild.cpp
index 1010eb3..25ab7e0 100644
--- a/dom/ipc/ContentChild.cpp
+++ b/dom/ipc/ContentChild.cpp
@@ -1564,6 +1564,10 @@ public:
             return NS_OK;
         }
 
+        // The threads are thawed. We can perform GC and CC normally.
+        nsJSContext::SetGCSuppressed(false);
+        nsJSContext::SetCCSuppressed(false);
+
         // In the new process.
         ContentChild* child = ContentChild::GetSingleton();
         child->SetProcessName(NS_LITERAL_STRING("(Preallocated app)"));
@@ -1723,6 +1727,11 @@ AddNewIPCProcess(pid_t aPid, NuwaProtoFdInfo* aInfoList, size_t aInfoListSize)
 NS_EXPORT void
 OnNuwaProcessReady()
 {
+    // The Nuwa process is ready. We can no longer perform GC and CC, which will
+    // block the main thread.
+    nsJSContext::SetGCSuppressed(true);
+    nsJSContext::SetCCSuppressed(true);
+
     mozilla::dom::ContentChild* content =
         mozilla::dom::ContentChild::GetSingleton();
     content->SendNuwaReady();
diff --git a/xpcom/threads/nsTimerImpl.cpp b/xpcom/threads/nsTimerImpl.cpp
index 3aa9e60..f2950a0 100644
--- a/xpcom/threads/nsTimerImpl.cpp
+++ b/xpcom/threads/nsTimerImpl.cpp
@@ -14,6 +14,10 @@
 #include "GeckoProfiler.h"
 #include "mozilla/Atomics.h"
 
+#ifdef MOZ_NUWA_PROCESS
+#include "ipc/Nuwa.h"
+#endif
+
 using mozilla::Atomic;
 using mozilla::TimeDuration;
 using mozilla::TimeStamp;
@@ -324,6 +328,12 @@ nsresult nsTimerImpl::InitCommon(uint32_t aType, uint32_t aDelay)
     return NS_ERROR_NOT_INITIALIZED;
   }
 
+#if defined(DEBUG) && defined(MOZ_NUWA_PROCESS)
+  if (IsNuwaProcess() && IsNuwaReady()) {
+    NS_RUNTIMEABORT("No timer allowed after the Nuwa process is ready!");
+  }
+#endif
+
   rv = gThread->Init();
   if (NS_WARN_IF(NS_FAILED(rv)))
     return rv;
-- 
1.7.9.5

